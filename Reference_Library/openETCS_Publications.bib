
@article{feuser_dependability_2012,
	title = {Dependability in Open Proof Software with Hardware Virtualization – The Railway Control Systems Perspective},
	author = {Feuser, Johannes and Peleska, Jan},
	year = {2012},
	note = {Cited by 0000},
	keywords = {dependability, domain-specific modeling, etcs, hardware virtualization, {OpenETCS}, open model software, open proof}
},

@inproceedings{gulan_graphical_2013,
	address = {Bochum, Germany},
	title = {Graphical Modelling meets Formal Methods},
	url = {http://www.indin2013.org},
	abstract = {The graphical modelling languages {UML} and {SysML}, nowadays widely used in industry, integrate different modelling concepts and notations in one standardised framework.
However, they lack a clearly defined, unambiguous semantics and thus their formal verification represents a challenge. On the other hand, current safety standards,
including {ISO} 26262, demand such verification especially for safety-relevant systems. The literature proposes a plethora of different semantics and formalisms for
{UML/SysML.} In this paper we compare and  summarise existing work on the formalisation of behavioural {UML} and {SysML} models and their verification. Our goal is to foster
a better understanding of the problems related to {UML/SysML} formalisation, and to aid people bridging the gap from high level graphical modelling to formal verification
techniques.},
	booktitle = {{INDIN} 2013},
	author = {Gulan, Stefan and Johr, Sven and Kretschmer, Roberto and Rieger, Stefan and Ditze, Michael},
	month = jul,
	year = {2013},
	note = {Cited by 0000}
},

@inproceedings{feuser_model_2012,
	title = {Model Based Development and Tests for {openETCS} Applications – A Comprehensive Tool Chain},
	abstract = {This paper presents research results on model-based develop-
ment and testing for the European Train Control System ({ETCS).} We
focus on the tool chain developed by the authors, which supports the creation of graphical formal specifications of the {ETCS} System Requirement
Specification, code generation, verification and validation.},
	booktitle = {{FORMS/FORMAT} 2012},
	author = {Feuser, Johannes and Peleska, Jan},
	year = {2012},
	note = {Cited by 0000},
	keywords = {architecture, domain-specific modeling, etcs, model-driven development, {OpenETCS}},
	pages = {235--243}
},

@misc{hase_openetcs:_2012,
	address = {Philadelphia, {USA}},
	title = {{openETCS:} Applying Open Proof's to the European Train Control System},
	abstract = {The Congress focuses on highspeed railway traffic. Here, the {openETCS} project has been presented a large audience of highly distinguished experts and has especially been presented to the non-european audience.},
	author = {Hase, Klaus-Rüdiger},
	year = {2012},
	note = {Cited by 0000}
},

@misc{hase_open_2013,
	address = {Graz, Austria},
	title = {Open {ETCS:} Ein internationales {ITEA2-Projekt} begleitet den Wandel},
	url = {http://www.schienenfahrzeugtagung.at/},
	abstract = {The symposium focuses on highspeed railway traffic, railway transport vehicles, rail fraight transport, vehicle components, and interaction of wheel and track. The platform of the symposium will be used to present the {openETCS} approach to a large audience of distinguished experts in railway business.},
	author = {Hase, Klaus-Rüdiger},
	year = {2013},
	note = {Cited by 0000}
},

@article{hase_openetcs:_2013,
	title = {{openETCS:} Ein internationales {ITEA2-Projekt} begleitet den Wandel zu mehr Transparenz},
	number = {137},
	journal = {{ZEVrail}},
	author = {Hase, Klaus-Rüdiger},
	year = {2013},
	pages = {182--187}
},

@inproceedings{hungar_opening_2013,
	address = {Aachen},
	title = {Opening up the Verification and Validation of Safety-Critical Software},
	abstract = {Commercial realizations of {ETCS} have not yet fulfilled the expectation of enabling smooth cross-border rail traffic. Starting from the hypothesis that the traditional way of developing software for safety-critical systems might be partly causing these problems, the {ITEA{\textasciitilde}2} project {openETCS} has set out to pursue the idea of transferring an open-source development style to this domain, taking the {EVC} as a case study. The goal is to formalize the requirements in a functional model, derive, via design models, an implementation, and demonstrate how the verification and validation activities necessary for certifying the result could be performed. All of this is to be done as an open-source project, employing only open-source tools. One of the main motives behind the approach is to use the potential of an open community to detect design and implementation flaws much better than the limited inspection in a traditional development setting. This papers discusses the challenges this new approach faces from the legal requirement of adhering to the standards, mainly the {EN} 50128 in this case, particularly with respect to verification and validation. This comprises the interpretation of the standard for a model-based development and qualification issues for personnel and tools.},
	author = {Hungar, Hardi and Behrens, Marc},
	month = feb,
	year = {2013}
},

@phdthesis{feuser_open_2013,
	title = {Open Source Software for Train Control Applications and its Architectural Implications},
	url = {http://nbn-resolving.de/urn:nbn:de:gbv:46-00103095-16},
	abstract = {This document describes the research results that were obtained from the development of
safety-critical software under the principles of open source. Different model-based designs
and architectures within the railway control system application domain, including re-usable
formalisms for verification \& validation, were investigated. The reduction of possible security
threats caused by platform or supplier specific adaptations of modelled open-core software was
analysed, and a possible solution by the usage of hardware virtualisation, instead of traditional
memory management, was elaborated. At core of this work, the development of a graphical
domain-specific language for modelling parts of the European Train Control System ({ETCS)} is
presented, which is based on specialised data, control flow formalisms, and language elements
derived from the specification document. For a more precise and therefore more appropriate
syntax definition for safety-critical systems, the already existing {GOPRR} meta meta model was
extended to the newly developed {GOPPRR} meta meta model. {GOPPRR} includes methods for
defining constraints by the object constraint language, which supports the definition of static
semantics to ensure correct model instances. Parts of the {ETCS} specification related to the
train on-board unit were modelled in a new meta model. To transform the developed model of
the {ETCS} specification into an executable application, a domain framework, according to the
new meta model and the corresponding code generator, were designed and implemented, which
have implicitly an integrated support for the verification \& validation process. To proof the
correctness of the modelled specification, the resulting application was executed in a simulative
environment to obtain simulation traces. The correspondence of traces to the expected data
from the specification document supported the used methods and strategies in this dissertation
as proof of concept.},
	school = {University Bremen},
	author = {Feuser, Johannes},
	month = mar,
	year = {2013},
	note = {Cited by 0000},
	keywords = {{DSL}, Model-based Development, model-driven engineering, {OpenETCS}}
},

@incollection{peleska_model-driven_2012,
	title = {The Model-Driven {openETCS} Paradigm for Secure, Safe and Certifiable Train Control Systems},
	isbn = {978-1-4666-1645-5},
	booktitle = {Railway Safety, Reliability and Security: Technologies and Systems Engineering},
	publisher = {Information Science Reference},
	author = {Peleska, Jan and Feuser, Johannes and Haxthausen, Anne Elisabeth},
	editor = {Flammini, Francesco},
	year = {2012},
	note = {Cited by 0000},
	keywords = {{OpenETCS}, railway control systems},
	pages = {22–52}
},

@misc{prevosto_tutorial:_2013,
	address = {Turku, Finland},
	type = {Tutorial},
	title = {Tutorial: Specification and Proof of Programs with Frama-C},
	url = {http://bts.frama-c.com/dokuwiki/doku.php?id=mantis:frama-c:tutorial:ifm-2013},
	abstract = {Despite the spectacular progress made by the developers of formal verification tools, their usage remains basically reserved for the most critical software. More and more engineers and researchers today are interested in such tools in order to integrate them into their everyday work. This half-day tutorial proposes a practical introduction during which the participants will write C program specifications, observe the proof results, analyze proof failures and fix them. Participants will be taught how to write a specification for a C program, in the form of function contracts, and easily prove it with an automatic tool in {FRAMA-C}, a freely available software verification toolset. Those who will have {FRAMA-C} and {JESSIE} installed (e.g. from ready-to-install packages frama-c, why, alt-ergo under Linux) will also run automatic proof of programs on their computer. Program specifications will be written in the specification language {ACSL} similar to other specification languages like {JML} that some participants may know. {ACSL-syntax} is intentionally close to C and can be easily learned on-the-fly.},
	author = {Prevosto, Virgile},
	month = jun,
	year = {2013}
}